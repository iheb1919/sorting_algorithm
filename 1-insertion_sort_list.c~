#include "sort.h"
/**
 * insertion_sort_list - function that sorts  integers in ascending order
 * @list: pointer to pointer of list
 *
 *
 */

void insertion_sort_list(listint_t **list)
{
listint_t *nodenext, *node;
if (*list && (*list)->next)
{
nodenext = (*list)->next;
while (nodenext)
{
node = nodenext->prev;
if (node)
{
if (nodenext->n < node->n)
{
swap_node(list, node, nodenext);
node = node->prev;
if (nodenext->prev)
nodenext = nodenext->prev;
print_list(*list);
}
else
{
;
}
}
if (nodenext)
nodenext = nodenext->next;
}
}
}
/**
 * swap_node - swap 2 nodes
 * @head: pointer of list
 * @node1: pointer
 * @node2: pointer
 */

void swap_node(listint_t **head, listint_t *node1, listint_t *node2)
{
	listint_t *temp;

	temp = node1->prev;
	if (temp)
		temp->next = node2;
	else
		*head = node2;
	node2->prev = temp;
	node1->prev = node2;
	node1->next = node2->next;
	if (node1->next)
		node1->next->prev = node1;
	node2->next = node1;
}
